// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package state

import (
	"context"
)

const createTrack = `-- name: CreateTrack :exec

INSERT INTO tracks (
  author, booktitle, trackindex, year, filename, trackname
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type CreateTrackParams struct {
	Author     string
	Booktitle  string
	Trackindex int64
	Year       int64
	Filename   string
	Trackname  string
}

// TODO(rjk): Can I name the parameters?
func (q *Queries) CreateTrack(ctx context.Context, arg CreateTrackParams) error {
	_, err := q.db.ExecContext(ctx, createTrack,
		arg.Author,
		arg.Booktitle,
		arg.Trackindex,
		arg.Year,
		arg.Filename,
		arg.Trackname,
	)
	return err
}

const listTracks = `-- name: ListTracks :many
SELECT id, author, booktitle, diskindex, trackindex, year, filename, trackname FROM tracks
ORDER BY filename
`

func (q *Queries) ListTracks(ctx context.Context) ([]Track, error) {
	rows, err := q.db.QueryContext(ctx, listTracks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Track
	for rows.Next() {
		var i Track
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Booktitle,
			&i.Diskindex,
			&i.Trackindex,
			&i.Year,
			&i.Filename,
			&i.Trackname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
